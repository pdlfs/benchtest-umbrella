#!/bin/bash

#
# Copyright (c) 2019 Carnegie Mellon University,
# Copyright (c) 2019 Triad National Security, LLC, as operator of
#     Los Alamos National Laboratory.
#
# All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.
#

#
# run_osu_bm.sh.in  run OSU mpi benchmarks
# 23-Aug-2020  chuck@ece.cmu.edu
#

#
# XXX: All the OSU benchmarks are run through MPI.  MPI selects the
# networking interface it uses.  On large production clusters, MPI will
# be configured to use the fastest network interface for its operations.
# Test clusters may be different... e.g. if the compute nodes have
# multiple network interfaces you might need to select the correct one.
# if you are using TCP you may be able to do this using the hostname
# (e.g. we often append a suffix to the hostname to indicate the type
# of interface ... "h0-ib" == infiniband, "h1-dfge" == 40 Gbps ethernet).
# otherwise you might need to specify the correct IP address (or give
# some sort of subnet mask?).
#
# currently we support using the plain hostname or using the hostname
# suffix mechanism.  the scripts currently don't support runing using
# IP subnet specs (can be added if needed).
#

set -euo pipefail

####################
# Input parameters #
####################

# host suffix
nb_hostsuffix=${OSU_HOSTSUFFIX:-""}

# cpubind
nb_cpubind=${OSU_CPUBIND:-"none"}

# extra mpirun opts
nb_extraopts=${OSU_EXTRAOPTS:-""}

# benchmark to run
nb_benchmark=${OSU_BENCHMARK:-"osu_bw"}

# number of times to run benchmark
nb_nruns=${OSU_NRUNS:-1}

# number of iterations in run
nb_iter=${OSU_ITER:-""}

# messages size flag
nb_msgsize=${OSU_MSGSIZE:-""}

# number of processes
nb_nproc=${OSU_NPROC:-""}

# number of threads
nb_nthread=${OSU_NTHREAD:-""}

# misc benchmark flags
nb_flags=${OSU_FLAGS:-""}

dryrun=${OSU_DRYRUN:-0}             # set to 1 for script debug

###############
# Core script #
###############
source @CMAKE_INSTALL_PREFIX@/scripts/common.sh

message "Script begin..."
# keep track of start time so we can see how long this takes
timein=`date`

get_jobdir
gen_hostfile

# if running on emulab, save the ltpmap too so we know physical node names
if [ -f /etc/emulab/paths.sh ]; then
    # XXX: don't source it, it messes with $PATH
    if [ -f /var/emulab/boot/ltpmap ]; then
        message "-INFO- saving pnode map /var/emulab/boot/ltpmap"
        cp /var/emulab/boot/ltpmap $jobdir
    elif [ -f /etc/testbed/ltpmap ]; then
        message "-INFO- saving pnode map /etc/testbed/ltpmap"
        cp /etc/testbed/ltpmap $jobdir
    elif [ -f /etc/rc.d/testbed/ltpmap ]; then
        message "-INFO- saving pnode map /etc/rc.d/testbed/ltpmap"
        cp /etc/rc.d/testbed/ltpmap $jobdir
    else
        message "-WARN- no Emulab pnode map!!"
    fi
fi

# get full path of the benchmark
if [ -x $nb_benchmark ]; then
    message "-INFO- benchmark set to $nb_benchmark"
else
    message "-INFO- searching for benchmark $nb_benchmark"
    bhome=${dfsu_prefix}/libexec/osu-micro-benchmarks/mpi
    for try in "" /collective /once-sided /pt2pt /startup; do
        if [ -x $bhome$try/$nb_benchmark ]; then
            nb_benchmark=$bhome$try/$nb_benchmark
            message "-INFO- found benchmark $nb_benchmark"
            break
        fi
    done
    if [ ! -x $nb_benchmark ]; then
        die "cannot find benchmark $nb_benchmark in $bhome"
    fi
fi
benchbase=`basename $nb_benchmark`
mkdir -p $jobdir/$benchbase

# build static part of command
cmd_base="$nb_benchmark"
if [ "$nb_flags" != "" ]; then
    cmd_base="$cmd_base $nb_flags"
fi
if [ "$nb_iter" != "" ]; then
    cmd_base="$cmd_base -i $nb_iter"
fi
if [ "$nb_msgsize" != "" ]; then
    cmd_base="$cmd_base -m $nb_msgsize"
fi
if [ "$nb_nproc" != "" ]; then
    cmd_base="$cmd_base --num_processes $nb_nproc"
fi
if [ "$nb_nthread" != "" ]; then
    cmd_base="$cmd_base --num_threads $nb_nthread"
fi

message ">>> Output is available in $jobdir"


for host1 in $all_nodes; do
    h1s="${host1}${nb_hostsuffix}"
    for host2 in $all_nodes; do
        h2s="${host2}${nb_hostsuffix}"
        if [ $host1 = $host2 ]; then
            continue
        fi
        message "-INFO-"
        message "-INFO- doing $host1-$host2 runs"
        message "-INFO-"
        run=0
        while [ $run -lt $nb_nruns ]; do
            now=`date`
            message "-----------------------------------------------------"
            message "-INFO- start run $host1-$host2.$run at $now"
            elog="$jobdir/$benchbase/$host1-$host2.log"
            the_cmd="$cmd_base"
            if [ "$dryrun" = 1 ]; then
                message "-DRYRUN- $the_cmd"
            else
                do_mpirun 2 1 "$nb_cpubind" "" "${h1s},${h2s}" "$the_cmd" \
                    "$nb_extraopts" "$logfile" "$elog" || \
                message "!!! NOTICE !!! app exited with error code"   
            fi
            now=`date`
            message "-INFO- Finished $host1-$host2.$run at ${now}"
            run=$((run + 1))
        done
        message "====================================================="

    done
done


# overall time
timeout=`date`
message "Script complete."
message "  dir: ${jobdir}"
message "start: ${timein}"
message "  end: ${timeout}"

exit 0
